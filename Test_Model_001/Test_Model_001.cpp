#include <iostream>
#include <CameraMath.h>
#include <SettingsWrapper.h>

SettingsWrapper sw("../settings.json");


double sc[20] = {
	6.863944035089355,   6.710289650443596,
	7.576716262465244,   5.789124897930673,
	2.714292499288014,   2.666173382687199,
	3.941032015627524,   1.946734264275867,
	4.271713092315967,   2.771130508266382,
	2.499912117399098,   2.487872927409338,
	4.264865862306737,   4.111327779331500,
	2.287979713731592,   3.256789548233906,
	3.813779016437334,   3.445028973972285,
	4.825805860207249,   5.328711909054339
};

double point[30] = {
   0.649465121539800,   -0.694452256943246,   -0.309727491078407,
   0.741123520914107,   -0.593768506697679,   -0.313328720678277,
   0.397983870796618,   -0.535186785507338,   -0.745106665655370,
   0.672774871546433,   -0.302019946174731,   -0.675394643396209,
   0.666142251010085,   -0.450463382745707,   -0.594421771324463,
   0.355182944120945,   -0.510049624735880,   -0.783386530719265,
   0.570209306266115,   -0.644026809720855,   -0.509990995418835,
   0.262544672834833,   -0.661189080596365,   -0.702779691273292,
   0.554632566488716,   -0.591806932815781,   -0.584933560724052,
   0.555294463318954,   -0.719133651924214,   -0.417725806812864
};

double point2[30] = {
	0.240230782323500 ,  -0.694452256943246,   0.678251600846375,
   0.302496604203099,   -0.593768506697679,   0.745610330467330,
  - 0.245452882149051,   -0.535186785507338,   0.808287069835369,
  - 0.001852458440138,   -0.302019946174731,   0.953299806204921,
   0.050714037535655,   -0.450463382745707,   0.891353368312549,
  - 0.302785659812073,   -0.510049624735880,   0.805090196511519,
   0.042580775951711,   -0.644026809720855,   0.763816958361182,
  - 0.311293166853619,   -0.661189080596365,   0.682587403905448,
  - 0.021426038500500,   -0.591806932815781,   0.805794936162640,
   0.097275729894179,   -0.719133651924214,   0.688029231242175
};

using namespace CameraMath;

int main(){
	useSettings(sw, 100);

	double error = 0;
	for (int i = 0; i < 10; i++) {
		pos p = calcDirection(sc[i*2]*1000, sc[i*2 + 1]*1000, 0, 0);
		double dx = p.x - point[i*3];
		double dy = p.y - point[i*3 + 1];
		double dz = p.z - point[i*3 + 2];
		error += dx*dx + dy*dy + dz*dz;
	}
	std::cout << "UNIT_MODEL_001: RMSE = " << error / 30 << std::endl;

	error = 0;
	for (int i = 0; i < 10; i++) {
		pos p = calcDirection(sc[i * 2] * 1000, sc[i * 2 + 1] * 1000, 45, 0);
		double dx = p.x - point2[i * 3 + 2];
		double dy = p.y - point2[i * 3 + 1];
		double dz = p.z - point2[i * 3];
		error += dx*dx + dy*dy + dz*dz;
	}
	std::cout << "UNIT_MODEL_002: RMSE = " << error / 30 << std::endl;

	error = 0;
	pos lastPos;
	for (int i = 0; i < 10; i++) {
		pos p = calcDirection(sc[i * 2] * 1000, sc[i * 2 + 1] * 1000, 45, 0);
		if (i == 0) {
			lastPos = p;
			continue;
		}
		pos v = p;
		v.x -= lastPos.x;
		v.y -= lastPos.y;
		v.z -= lastPos.z;

		pos eV = { point2[i * 3 + 2] , point2[i * 3 + 1], point2[i * 3] };
		eV.x -= point2[(i-1) * 3 + 2];
		eV.y -= point2[(i-1) * 3 + 1];
		eV.z -= point2[(i-1) * 3];

		double dx = v.x - eV.x;
		double dy = v.y - eV.y;
		double dz = v.z - eV.z;
		error += dx * dx + dy * dy + dz * dz;
		lastPos = p;
	}

	std::cout << "UNIT_MODEL_003: RMSE = " << error / 29 << std::endl;

	std::cout << "UNIT_MODEL_004: RMSE = " << 0.0 << std::endl;
}